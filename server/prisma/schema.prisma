generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "darwin-arm64", "linux-musl-arm64-openssl-3.0.x"]
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum matching_event_phase {
  INACTIVE
  ENROLLING
  CHOOSING
  MATCHING
  FINISHED
}

model matching_event {
  id               String               @id(map: "PK_65624d28d02d4d1e9d01e227776") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  phase            matching_event_phase @default(INACTIVE)
  choosingStartsAt DateTime             @db.Timestamp(6)
  matchingStartsAt DateTime             @db.Timestamp(6)
  title            String               @db.VarChar
  description      Json                 @default("{}")
  isPrepaid        Boolean              @default(false)
  questionnaire    Json                 @default("{\"关于我\":\"\", \"我的理想型\":\"\", \"最理想的周末\":\"\"}")
  participants     participant[]
  picking          picking[]
  order            order[]
}

enum participant_postMatchingAction {
  INSIST
  REVERSE
}

model participant {
  id                  String                          @id(map: "PK_64da4237f502041781ca15d4c41") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  hasConfirmedPicking Boolean                         @default(false)
  postMatchingAction  participant_postMatchingAction?
  userId              String                          @db.Uuid
  eventNumber         Int                             @default(0)
  matchingEventId     String                          @db.Uuid
  matching_event      matching_event                  @relation(fields: [matchingEventId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_74c88acd49c4572ed56ba7b31bc")
  user                user                            @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_b915e97dea27ffd1e40c8003b3b")

  @@unique([userId, matchingEventId], map: "UQ_b421dfc701991352786fd102baa")
  @@unique([matchingEventId, eventNumber])
}

model photo {
  id          String  @id(map: "PK_723fa50bf70dcfd06fb5a44d4ff") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  cosLocation String  @db.VarChar
  userId      String? @db.Uuid
  user        user?   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_4494006ff358f754d07df5ccc87")
}

model picking {
  id                String         @id(map: "PK_ca69806eaffe87469fec16ad0b1") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  matchingEventId   String         @db.Uuid
  madeByUserId      String         @db.Uuid
  pickedUserId      String         @db.Uuid
  isInsisted        Boolean        @default(false)
  isReverse         Boolean        @default(false)
  isInsistResponded Boolean        @default(false)
  pickedUser        user           @relation("picking_pickedUserIdTouser", fields: [pickedUserId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_0e6c0767733d3dc7d0cd32591bc")
  madeByUser        user           @relation("picking_madeByUserIdTouser", fields: [madeByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_941fab583d61f8f58ad038118d9")
  matching_event    matching_event @relation(fields: [matchingEventId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_c810aa9c2884f17395d27ea6f82")

  @@unique([matchingEventId, madeByUserId, pickedUserId], map: "UQ_matchingEventId_madeByUserId_pickedUserId")
}

model user {
  id                                 String        @id(map: "PK_cace4a159ff9f2512dd42373760") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                               String?       @db.VarChar
  gender                             String?       @db.VarChar
  phoneNumber                        String?       @unique @db.VarChar
  jobTitle                           String?       @db.VarChar
  highestEducation                   String?       @db.VarChar
  graduatedFrom                      String?       @db.VarChar
  height                             Float?
  dateOfBirth                        String?       @db.VarChar
  hometown                           String?       @db.VarChar
  isAdmin                            Boolean       @default(false)
  mbti                               String?       @db.VarChar
  bio                                Json          @default("{}")
  loginToken                         String?       @unique @db.VarChar
  createdAt                          DateTime      @default(now()) @db.Timestamp(6)
  updatedAt                          DateTime      @default(now()) @db.Timestamp(6)
  wechatOpenId                       String?       @unique @db.VarChar
  participant                        participant[]
  photos                             photo[]
  picking_picking_pickedUserIdTouser picking[]     @relation("picking_pickedUserIdTouser")
  picking_picking_madeByUserIdTouser picking[]     @relation("picking_madeByUserIdTouser")
  orders                             order[]
}

enum order_status {
  PAID
  PENDING
  REFUNDED
}

model order {
  id      String         @id(map: "PK_0e6c0767733d3dc7d0cd32591bc") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId  String         @db.Uuid
  eventId String         @db.Uuid
  amount  Float
  refNo   String?        @db.VarChar
  status  order_status
  user    user           @relation(fields: [userId], references: [id])
  event   matching_event @relation(fields: [eventId], references: [id])
}
