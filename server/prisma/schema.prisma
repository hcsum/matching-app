generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model matching_event {
  id              String        @id(map: "PK_65624d28d02d4d1e9d01e227776") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  phase           String        @default("inactive") @db.VarChar
  startChoosingAt DateTime      @db.Timestamp(6)
  title           String        @db.VarChar
  description     Json          @default("{}")
  participant     participant[]
  picking         picking[]
}

model migrations {
  id        Int    @id(map: "PK_8c82d7f526340ab734260ea46be") @default(autoincrement())
  timestamp BigInt
  name      String @db.VarChar
}

model participant {
  id                  String         @id(map: "PK_64da4237f502041781ca15d4c41") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  hasConfirmedPicking Boolean        @default(false)
  postMatchingAction  String?        @db.VarChar
  userId              String         @db.Uuid
  matchingEventId     String         @db.Uuid
  hasUpdatedProfile   Boolean        @default(false)
  matching_event      matching_event @relation(fields: [matchingEventId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_74c88acd49c4572ed56ba7b31bc")
  user                user           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_b915e97dea27ffd1e40c8003b3b")

  @@unique([userId, matchingEventId], map: "UQ_b421dfc701991352786fd102baa")
}

model photo {
  id     String  @id(map: "PK_723fa50bf70dcfd06fb5a44d4ff") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  url    String  @db.VarChar
  userId String? @db.Uuid
  user   user?   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_4494006ff358f754d07df5ccc87")
}

model picking {
  id                              String         @id(map: "PK_ca69806eaffe87469fec16ad0b1") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  matchingEventId                 String         @db.Uuid
  madeByUserId                    String         @db.Uuid
  pickedUserId                    String         @db.Uuid
  isInsisted                      Boolean        @default(false)
  isReverse                       Boolean        @default(false)
  isInsistResponded               Boolean        @default(false)
  user_picking_pickedUserIdTouser user           @relation("picking_pickedUserIdTouser", fields: [pickedUserId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_0e6c0767733d3dc7d0cd32591bc")
  user_picking_madeByUserIdTouser user           @relation("picking_madeByUserIdTouser", fields: [madeByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_941fab583d61f8f58ad038118d9")
  matching_event                  matching_event @relation(fields: [matchingEventId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_c810aa9c2884f17395d27ea6f82")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user {
  id                                 String        @id(map: "PK_cace4a159ff9f2512dd42373760") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                               String?       @db.VarChar
  gender                             String?       @db.VarChar
  phoneNumber                        String?       @db.VarChar
  age                                Int?
  jobTitle                           String?       @db.VarChar
  wechatId                           String?       @db.VarChar
  bio                                Json          @default("{}")
  loginToken                         String?       @db.VarChar
  createdAt                          DateTime      @default(now()) @db.Timestamp(6)
  updatedAt                          DateTime      @default(now()) @db.Timestamp(6)
  wechatOpenId                       String?       @db.VarChar
  participant                        participant[]
  photo                              photo[]
  picking_picking_pickedUserIdTouser picking[]     @relation("picking_pickedUserIdTouser")
  picking_picking_madeByUserIdTouser picking[]     @relation("picking_madeByUserIdTouser")
}
